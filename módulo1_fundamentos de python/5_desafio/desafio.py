# Atividade 01. Execute e analise a sa√≠da do seguinte c√≥digo:

# rela√ß√£o dos nomes
nomes = ['Maria', 'Julieta', 'Fernando', 'Cristiano', 'Julieta', 'Maria', 'Fernando', 'Cl√°udio']
# estrutura que ir√° armazenar o n√∫mero de letras de cada nome
qtd_letras = {}
# calcula o tamanho de cada nome (em n√∫mero de letras) e armazena o valor na estrutura
for nome in nomes:
    qtd_letras[nome] = len(nome)

print(qtd_letras)
print(type(nomes)) # <class 'list'>
print(type(qtd_letras)) # <class 'dict'>
print(len(nomes)) # 8
print(len(qtd_letras)) # 6


""" # Atividade 02. Reescreva o c√≥digo da Atividade 01 utilizando o conceito de compreens√£o de dicion√°rios (dict comprehension).

# rela√ß√£o dos nomes
nomes = ['Maria', 'Julieta', 'Fernando', 'Cristiano', 'Julieta', 'Maria', 'Fernando', 'Cl√°udio', 'Antonio']

# estrutura que ir√° armazenar o n√∫mero de letras de cada nome
qtd_letras = {nome: len(nome) for nome in nomes}
print(qtd_letras) """

""" Atividade 03. Crie uma fun√ß√£o area(r, pi), que calcule a √°rea de um c√≠rculo.

# a) A utiliza√ß√£o de um valor padr√£o para pi (ùúã = 3,14), sem a necessidade de declarar explicitamente o seu valor;

fun√ß√£o que calcula a √°rea de um c√≠rculo
def area_ciculo(r):
    return 3,14 * (r ** 2)

print('√Årea do c√≠rculo:', area_ciculo(8))

# b) A utiliza√ß√£o com a declara√ß√£o explicita do valor exato de pi desejado.

# fun√ß√£o que calcula a √°rea de um c√≠rculo

def area_ciculo(r, pi):
    return pi * (r ** 2)

print('√Årea do c√≠rculo:', area_ciculo(8, 3.14)) """

""" # Atividade 04. Reescreva a fun√ß√£o area da atividade 3, utilizando o conceito de fun√ß√µes an√¥nimas (fun√ß√µes lambdas):

# area_circulo = lambda r, pi: pi * (r ** 2)
# print('√Årea do c√≠rculo:', area_circulo(8, 3.14)) """

""" # Atividade 05. Crie um m√≥dulo em Python, chamado processalista (arquivo processalista.py), com as seguintes fun√ß√µes,
# que dever√£o receber como argumento uma lista (tipolist) de n√∫meros inteiros.

import processalista

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# a) Encontra e retorna o maior n√∫mero impar presente na lista
print(processalista.maior_impar(lista))

# b) Encontra e retorna o menor n√∫mero impar presente na lista
print(processalista.menor_impar(lista))

# c) Encontra e retorna o maior e o menor n√∫mero √≠mpar presentes na lista
print(processalista.maior_menor_impar(lista))
 """


""" # Atividade 06. Considere a seguinte agenda de disponibilidade de atendimento de uma cl√≠nica com v√°rios m√©dicos, cada um de uma especialidade distinta. Essa
# cl√≠nica possu√≠ apenas tr√™s consult√≥rios, e, por isso, no m√°ximo tr√™s m√©dicos podem atender por dia.

# A cl√≠nica percebeu que os pacientes que desejam se consultar com mais de um m√©dico sempre solicitam que o atendimento seja realizado no mesmo dia. Por
# exemplo, um paciente gostaria de se consultar, no mesmo dia, com o ortopedista e com o neurologista, ent√£o os dias dispon√≠veis ser√£o: ter√ßa e quinta. Outro
# exemplo √© um paciente que gostaria de se consultar com o dermatologista, o neurologista e o psiquiatra. O √∫nico dia dispon√≠vel ser√° a sexta.
# Entretanto, essas solicita√ß√µes est√£o causando dor de cabe√ßa, pois √© necess√°rio verificar manualmente a disponibilidade. Voc√™, como um(a) aspirante a
# desenvolvedor Python, aceitou o desafio de ajudar a automatizar essa tarefa. Para tanto, ir√° desenvolver duas fun√ß√µes que receber√£o a rela√ß√£o de disponibilidade de
# cada m√©dico e que retornar√£o os dias dispon√≠veis:

# rela√ß√£o de dias da semana que cada m√©dico atende
cardiologista = {'terca', 'quarta'}
ortopedista = {'terca', 'quinta'}
dermatologista = {'segunda', 'quarta', 'sexta'}
neurologista = {'terca', 'quinta', 'sexta'}
psiquiatra = {'segunda', 'quarta', 'sexta'}

# Calcula quais os dias poss√≠veis para dois m√©dicos
def disp_dois_especialistas(medico01, medico02):
    return medico01.intersection(medico02)


# Calcula quais os dias poss√≠veis para tr√™s m√©dicos
def disp_tres_especialistas(medico01, medico02, medico03):
    return medico01.intersection(medico02, medico03)


# Assim, para os exemplos anteriores, as fun√ß√µes dever√£o ter os seguintes retornos:
# M√©dicos solicitados: ortopedista e neurologista
print(disp_dois_especialistas(ortopedista, neurologista))
# RETORNA: ter√ßa e quinta
# M√©dicos solicitados: dermatologista, neurologista, psquiatra
print(disp_tres_especialistas(dermatologista, neurologista, psiquiatra))
# RETORNA: sexta """